# Generated by the gRPC Python protocol compiler streaming. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import service_pb2 as service__pb2


class ABCIListenerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListenBeginBlock = channel.unary_unary(
                '/cosmos.base.abci.v1beta1.ABCIListenerService/ListenBeginBlock',
                request_serializer=service__pb2.PutRequest.SerializeToString,
                response_deserializer=service__pb2.Empty.FromString,
                )
        self.ListenEndBlock = channel.unary_unary(
                '/cosmos.base.abci.v1beta1.ABCIListenerService/ListenEndBlock',
                request_serializer=service__pb2.PutRequest.SerializeToString,
                response_deserializer=service__pb2.Empty.FromString,
                )
        self.ListenDeliverTx = channel.unary_unary(
                '/cosmos.base.abci.v1beta1.ABCIListenerService/ListenDeliverTx',
                request_serializer=service__pb2.PutRequest.SerializeToString,
                response_deserializer=service__pb2.Empty.FromString,
                )
        self.ListenStoreKVPair = channel.unary_unary(
                '/cosmos.base.abci.v1beta1.ABCIListenerService/ListenStoreKVPair',
                request_serializer=service__pb2.PutRequest.SerializeToString,
                response_deserializer=service__pb2.Empty.FromString,
                )


class ABCIListenerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListenBeginBlock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListenEndBlock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListenDeliverTx(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListenStoreKVPair(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ABCIListenerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListenBeginBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.ListenBeginBlock,
                    request_deserializer=service__pb2.PutRequest.FromString,
                    response_serializer=service__pb2.Empty.SerializeToString,
            ),
            'ListenEndBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.ListenEndBlock,
                    request_deserializer=service__pb2.PutRequest.FromString,
                    response_serializer=service__pb2.Empty.SerializeToString,
            ),
            'ListenDeliverTx': grpc.unary_unary_rpc_method_handler(
                    servicer.ListenDeliverTx,
                    request_deserializer=service__pb2.PutRequest.FromString,
                    response_serializer=service__pb2.Empty.SerializeToString,
            ),
            'ListenStoreKVPair': grpc.unary_unary_rpc_method_handler(
                    servicer.ListenStoreKVPair,
                    request_deserializer=service__pb2.PutRequest.FromString,
                    response_serializer=service__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cosmos.base.abci.v1beta1.ABCIListenerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ABCIListenerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListenBeginBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cosmos.base.abci.v1beta1.ABCIListenerService/ListenBeginBlock',
            service__pb2.PutRequest.SerializeToString,
            service__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListenEndBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cosmos.base.abci.v1beta1.ABCIListenerService/ListenEndBlock',
            service__pb2.PutRequest.SerializeToString,
            service__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListenDeliverTx(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cosmos.base.abci.v1beta1.ABCIListenerService/ListenDeliverTx',
            service__pb2.PutRequest.SerializeToString,
            service__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListenStoreKVPair(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cosmos.base.abci.v1beta1.ABCIListenerService/ListenStoreKVPair',
            service__pb2.PutRequest.SerializeToString,
            service__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
