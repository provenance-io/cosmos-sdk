// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/sanction/v1beta1/sanction.proto

package sanction

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SanctionImmediateParams defines the sanction module's params for deposits on immediate sanction or unsanction
// messages.
type SanctionImmediateParams struct {
	// Minimum deposit for an immediate sanction message.
	MinDepositSanction github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=min_deposit_sanction,json=minDepositSanction,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"min_deposit_sanction,omitempty"`
	// Minimum deposit for an immediate unsanction message.
	MinDepositUnsanction github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=min_deposit_unsanction,json=minDepositUnsanction,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"min_deposit_unsanction,omitempty"`
}

func (m *SanctionImmediateParams) Reset()         { *m = SanctionImmediateParams{} }
func (m *SanctionImmediateParams) String() string { return proto.CompactTextString(m) }
func (*SanctionImmediateParams) ProtoMessage()    {}
func (*SanctionImmediateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e632afabc7910f0, []int{0}
}
func (m *SanctionImmediateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SanctionImmediateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SanctionImmediateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SanctionImmediateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SanctionImmediateParams.Merge(m, src)
}
func (m *SanctionImmediateParams) XXX_Size() int {
	return m.Size()
}
func (m *SanctionImmediateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_SanctionImmediateParams.DiscardUnknown(m)
}

var xxx_messageInfo_SanctionImmediateParams proto.InternalMessageInfo

func (m *SanctionImmediateParams) GetMinDepositSanction() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.MinDepositSanction
	}
	return nil
}

func (m *SanctionImmediateParams) GetMinDepositUnsanction() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.MinDepositUnsanction
	}
	return nil
}

func init() {
	proto.RegisterType((*SanctionImmediateParams)(nil), "cosmos.sanction.v1beta1.SanctionImmediateParams")
}

func init() {
	proto.RegisterFile("cosmos/sanction/v1beta1/sanction.proto", fileDescriptor_9e632afabc7910f0)
}

var fileDescriptor_9e632afabc7910f0 = []byte{
	// 290 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4b, 0xce, 0x2f, 0xce,
	0xcd, 0x2f, 0xd6, 0x2f, 0x4e, 0xcc, 0x4b, 0x2e, 0xc9, 0xcc, 0xcf, 0xd3, 0x2f, 0x33, 0x4c, 0x4a,
	0x2d, 0x49, 0x34, 0x84, 0x0b, 0xe8, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x89, 0x43, 0xd4, 0xe9,
	0xc1, 0x85, 0xa1, 0xea, 0xa4, 0xe4, 0xa0, 0x06, 0x24, 0x25, 0x16, 0xa7, 0xc2, 0x35, 0x27, 0xe7,
	0x67, 0x42, 0x35, 0x4a, 0x89, 0xa4, 0xe7, 0xa7, 0xe7, 0x83, 0x99, 0xfa, 0x20, 0x16, 0x44, 0x54,
	0xe9, 0x36, 0x13, 0x97, 0x78, 0x30, 0xd4, 0x28, 0xcf, 0xdc, 0xdc, 0xd4, 0x94, 0xcc, 0xc4, 0x92,
	0xd4, 0x80, 0xc4, 0xa2, 0xc4, 0xdc, 0x62, 0xa1, 0xd9, 0x8c, 0x5c, 0x22, 0xb9, 0x99, 0x79, 0xf1,
	0x29, 0xa9, 0x05, 0xf9, 0xc5, 0x99, 0x25, 0xf1, 0x30, 0x2b, 0x25, 0x18, 0x15, 0x98, 0x35, 0xb8,
	0x8d, 0x24, 0xf5, 0xa0, 0x4e, 0x01, 0xd9, 0x08, 0x73, 0x86, 0x9e, 0x73, 0x7e, 0x66, 0x9e, 0x93,
	0xdf, 0xab, 0x7b, 0xf2, 0x72, 0xd8, 0xb4, 0xea, 0xe4, 0xe7, 0x66, 0x96, 0xa4, 0xe6, 0x16, 0x94,
	0x54, 0xae, 0xba, 0x2f, 0xaf, 0x91, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab,
	0x0f, 0x75, 0x3c, 0x84, 0xd2, 0x2d, 0x4e, 0xc9, 0xd6, 0x2f, 0xa9, 0x2c, 0x48, 0x2d, 0x06, 0x1b,
	0x57, 0x1c, 0x24, 0x94, 0x9b, 0x99, 0xe7, 0x02, 0x31, 0x0a, 0xe6, 0x58, 0xa1, 0x85, 0x8c, 0x5c,
	0x62, 0xc8, 0x56, 0x94, 0xe6, 0xc1, 0xdd, 0xc7, 0x44, 0xc8, 0x7d, 0x01, 0xaf, 0xee, 0xc9, 0x2b,
	0x60, 0xd7, 0x4c, 0xa6, 0x0b, 0x45, 0x10, 0x2e, 0x0c, 0x85, 0x9b, 0xe5, 0xe4, 0x78, 0xe2, 0x91,
	0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1,
	0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0xea, 0x78, 0x4d, 0xae, 0x80, 0xc7, 0x7a, 0x12,
	0x1b, 0x38, 0x9e, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc7, 0x24, 0xda, 0x28, 0x20, 0x02,
	0x00, 0x00,
}

func (m *SanctionImmediateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SanctionImmediateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SanctionImmediateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MinDepositUnsanction) > 0 {
		for iNdEx := len(m.MinDepositUnsanction) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MinDepositUnsanction[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSanction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MinDepositSanction) > 0 {
		for iNdEx := len(m.MinDepositSanction) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MinDepositSanction[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSanction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintSanction(dAtA []byte, offset int, v uint64) int {
	offset -= sovSanction(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SanctionImmediateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MinDepositSanction) > 0 {
		for _, e := range m.MinDepositSanction {
			l = e.Size()
			n += 1 + l + sovSanction(uint64(l))
		}
	}
	if len(m.MinDepositUnsanction) > 0 {
		for _, e := range m.MinDepositUnsanction {
			l = e.Size()
			n += 1 + l + sovSanction(uint64(l))
		}
	}
	return n
}

func sovSanction(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSanction(x uint64) (n int) {
	return sovSanction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SanctionImmediateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSanction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SanctionImmediateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SanctionImmediateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDepositSanction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSanction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSanction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinDepositSanction = append(m.MinDepositSanction, &types.Coin{})
			if err := m.MinDepositSanction[len(m.MinDepositSanction)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDepositUnsanction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSanction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSanction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSanction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinDepositUnsanction = append(m.MinDepositUnsanction, &types.Coin{})
			if err := m.MinDepositUnsanction[len(m.MinDepositUnsanction)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSanction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSanction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSanction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSanction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSanction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSanction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSanction
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSanction
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSanction
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSanction        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSanction          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSanction = fmt.Errorf("proto: unexpected end of group")
)
