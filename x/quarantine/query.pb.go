// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/quarantine/v1beta1/query.proto

package quarantine

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryQuarantinedFundsRequest defines the RPC request for looking up quarantined funds.
type QueryQuarantinedFundsRequest struct {
	// to_address is the intended recipient of the coins that have been quarantined.
	ToAddress string `protobuf:"bytes,1,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	// from_address is the sender of the coins. If provided, a to_address must also be provided.
	FromAddress string `protobuf:"bytes,2,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryQuarantinedFundsRequest) Reset()         { *m = QueryQuarantinedFundsRequest{} }
func (m *QueryQuarantinedFundsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQuarantinedFundsRequest) ProtoMessage()    {}
func (*QueryQuarantinedFundsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e6232ebe830d056, []int{0}
}
func (m *QueryQuarantinedFundsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQuarantinedFundsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQuarantinedFundsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQuarantinedFundsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQuarantinedFundsRequest.Merge(m, src)
}
func (m *QueryQuarantinedFundsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQuarantinedFundsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQuarantinedFundsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQuarantinedFundsRequest proto.InternalMessageInfo

func (m *QueryQuarantinedFundsRequest) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

func (m *QueryQuarantinedFundsRequest) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *QueryQuarantinedFundsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryQuarantinedFundsResponse defines the RPC response of a QuarantinedFunds query.
type QueryQuarantinedFundsResponse struct {
	// quarantinedFunds is info about coins sitting in quarantine.
	QuarantinedFunds []*QuarantinedFunds `protobuf:"bytes,1,rep,name=quarantinedFunds,proto3" json:"quarantinedFunds,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryQuarantinedFundsResponse) Reset()         { *m = QueryQuarantinedFundsResponse{} }
func (m *QueryQuarantinedFundsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryQuarantinedFundsResponse) ProtoMessage()    {}
func (*QueryQuarantinedFundsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e6232ebe830d056, []int{1}
}
func (m *QueryQuarantinedFundsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQuarantinedFundsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQuarantinedFundsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQuarantinedFundsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQuarantinedFundsResponse.Merge(m, src)
}
func (m *QueryQuarantinedFundsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryQuarantinedFundsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQuarantinedFundsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQuarantinedFundsResponse proto.InternalMessageInfo

func (m *QueryQuarantinedFundsResponse) GetQuarantinedFunds() []*QuarantinedFunds {
	if m != nil {
		return m.QuarantinedFunds
	}
	return nil
}

func (m *QueryQuarantinedFundsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryIsQuarantinedRequest defines the RPC request for checking if an account has opted into quarantine.
type QueryIsQuarantinedRequest struct {
	// to_address is the address to check.
	ToAddress string `protobuf:"bytes,1,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
}

func (m *QueryIsQuarantinedRequest) Reset()         { *m = QueryIsQuarantinedRequest{} }
func (m *QueryIsQuarantinedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIsQuarantinedRequest) ProtoMessage()    {}
func (*QueryIsQuarantinedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e6232ebe830d056, []int{2}
}
func (m *QueryIsQuarantinedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsQuarantinedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsQuarantinedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsQuarantinedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsQuarantinedRequest.Merge(m, src)
}
func (m *QueryIsQuarantinedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsQuarantinedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsQuarantinedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsQuarantinedRequest proto.InternalMessageInfo

func (m *QueryIsQuarantinedRequest) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

// QueryIsQuarantinedResponse defines the RPC response of an IsQuarantined query.
type QueryIsQuarantinedResponse struct {
	// is_quarantined is true if the to_address has opted into quarantine.
	IsQuarantined bool `protobuf:"varint,1,opt,name=is_quarantined,json=isQuarantined,proto3" json:"is_quarantined,omitempty"`
}

func (m *QueryIsQuarantinedResponse) Reset()         { *m = QueryIsQuarantinedResponse{} }
func (m *QueryIsQuarantinedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIsQuarantinedResponse) ProtoMessage()    {}
func (*QueryIsQuarantinedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e6232ebe830d056, []int{3}
}
func (m *QueryIsQuarantinedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsQuarantinedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsQuarantinedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsQuarantinedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsQuarantinedResponse.Merge(m, src)
}
func (m *QueryIsQuarantinedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsQuarantinedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsQuarantinedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsQuarantinedResponse proto.InternalMessageInfo

func (m *QueryIsQuarantinedResponse) GetIsQuarantined() bool {
	if m != nil {
		return m.IsQuarantined
	}
	return false
}

// QueryQuarantineAutoResponsesRequest defines the RPC request for getting auto-response settings for an address.
type QueryQuarantineAutoResponsesRequest struct {
	// to_address is the quarantined account to get info on.
	ToAddress string `protobuf:"bytes,1,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	// from_address is an optional sender address to limit results.
	FromAddress string `protobuf:"bytes,2,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryQuarantineAutoResponsesRequest) Reset()         { *m = QueryQuarantineAutoResponsesRequest{} }
func (m *QueryQuarantineAutoResponsesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQuarantineAutoResponsesRequest) ProtoMessage()    {}
func (*QueryQuarantineAutoResponsesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e6232ebe830d056, []int{4}
}
func (m *QueryQuarantineAutoResponsesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQuarantineAutoResponsesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQuarantineAutoResponsesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQuarantineAutoResponsesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQuarantineAutoResponsesRequest.Merge(m, src)
}
func (m *QueryQuarantineAutoResponsesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQuarantineAutoResponsesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQuarantineAutoResponsesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQuarantineAutoResponsesRequest proto.InternalMessageInfo

func (m *QueryQuarantineAutoResponsesRequest) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

func (m *QueryQuarantineAutoResponsesRequest) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *QueryQuarantineAutoResponsesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryQuarantineAutoResponsesResponse defines the RPC response of a QuarantineAutoResponses query.
type QueryQuarantineAutoResponsesResponse struct {
	// results are the auto-response entries from the provided query.
	Results []*QuarantineAutoResponseEntry `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryQuarantineAutoResponsesResponse) Reset()         { *m = QueryQuarantineAutoResponsesResponse{} }
func (m *QueryQuarantineAutoResponsesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryQuarantineAutoResponsesResponse) ProtoMessage()    {}
func (*QueryQuarantineAutoResponsesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e6232ebe830d056, []int{5}
}
func (m *QueryQuarantineAutoResponsesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQuarantineAutoResponsesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQuarantineAutoResponsesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQuarantineAutoResponsesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQuarantineAutoResponsesResponse.Merge(m, src)
}
func (m *QueryQuarantineAutoResponsesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryQuarantineAutoResponsesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQuarantineAutoResponsesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQuarantineAutoResponsesResponse proto.InternalMessageInfo

func (m *QueryQuarantineAutoResponsesResponse) GetResults() []*QuarantineAutoResponseEntry {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *QueryQuarantineAutoResponsesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryQuarantinedFundsRequest)(nil), "cosmos.quarantine.v1beta1.QueryQuarantinedFundsRequest")
	proto.RegisterType((*QueryQuarantinedFundsResponse)(nil), "cosmos.quarantine.v1beta1.QueryQuarantinedFundsResponse")
	proto.RegisterType((*QueryIsQuarantinedRequest)(nil), "cosmos.quarantine.v1beta1.QueryIsQuarantinedRequest")
	proto.RegisterType((*QueryIsQuarantinedResponse)(nil), "cosmos.quarantine.v1beta1.QueryIsQuarantinedResponse")
	proto.RegisterType((*QueryQuarantineAutoResponsesRequest)(nil), "cosmos.quarantine.v1beta1.QueryQuarantineAutoResponsesRequest")
	proto.RegisterType((*QueryQuarantineAutoResponsesResponse)(nil), "cosmos.quarantine.v1beta1.QueryQuarantineAutoResponsesResponse")
}

func init() {
	proto.RegisterFile("cosmos/quarantine/v1beta1/query.proto", fileDescriptor_6e6232ebe830d056)
}

var fileDescriptor_6e6232ebe830d056 = []byte{
	// 611 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x55, 0xc1, 0x6f, 0x12, 0x4f,
	0x18, 0x65, 0xf8, 0xe5, 0x57, 0xed, 0x60, 0x4d, 0x33, 0x31, 0x91, 0x6e, 0xea, 0x86, 0xa0, 0x28,
	0x6a, 0xba, 0x13, 0x68, 0x6b, 0x4d, 0x9a, 0xa8, 0x40, 0xac, 0xf1, 0xd6, 0xa2, 0x89, 0x09, 0x17,
	0x32, 0xc0, 0x74, 0xdd, 0xb4, 0xcc, 0xc0, 0xce, 0x6c, 0xb5, 0x69, 0xb8, 0xf8, 0x17, 0x98, 0xf4,
	0xe4, 0xd5, 0x9b, 0x47, 0x13, 0x2f, 0x1e, 0xbd, 0x79, 0x6c, 0xf4, 0xe2, 0xc1, 0x83, 0x01, 0xff,
	0x10, 0xc3, 0xec, 0x00, 0x0b, 0x85, 0x2e, 0xa8, 0x27, 0x4f, 0x64, 0x98, 0xf7, 0xde, 0xf7, 0xbd,
	0x37, 0xdf, 0xcc, 0xc2, 0x54, 0x95, 0x8b, 0x3a, 0x17, 0xb8, 0xe9, 0x11, 0x97, 0x30, 0xe9, 0x30,
	0x8a, 0x0f, 0x32, 0x15, 0x2a, 0x49, 0x06, 0x37, 0x3d, 0xea, 0x1e, 0x5a, 0x0d, 0x97, 0x4b, 0x8e,
	0x96, 0x7c, 0x98, 0x35, 0x80, 0x59, 0x1a, 0x66, 0x2c, 0xdb, 0x9c, 0xdb, 0xfb, 0x14, 0x93, 0x86,
	0x83, 0x09, 0x63, 0x5c, 0x12, 0xe9, 0x70, 0x26, 0x7c, 0xa2, 0x71, 0x4b, 0xeb, 0x57, 0x88, 0xa0,
	0xbe, 0x62, 0x5f, 0xbf, 0x41, 0x6c, 0x87, 0x29, 0xf0, 0x08, 0x76, 0x6c, 0x2f, 0xfd, 0xba, 0x3e,
	0x56, 0x37, 0x54, 0x56, 0x2b, 0xac, 0xbb, 0x53, 0x8b, 0xe4, 0x77, 0x00, 0x97, 0x77, 0xba, 0x95,
	0x76, 0xfa, 0xa4, 0xda, 0x96, 0xc7, 0x6a, 0xa2, 0x48, 0x9b, 0x1e, 0x15, 0x12, 0x6d, 0x40, 0x28,
	0x79, 0x99, 0xd4, 0x6a, 0x2e, 0x15, 0x22, 0x0e, 0x12, 0x20, 0x3d, 0x9f, 0x8f, 0x7f, 0xf9, 0xb0,
	0x72, 0x49, 0xcb, 0xe4, 0xfc, 0x9d, 0x27, 0xd2, 0x75, 0x98, 0x5d, 0x9c, 0x97, 0x5c, 0xff, 0x81,
	0x36, 0xe1, 0x85, 0x5d, 0x97, 0xd7, 0xfb, 0xd4, 0x68, 0x08, 0x35, 0xd6, 0x45, 0xf7, 0xc8, 0x5b,
	0x10, 0x0e, 0x1c, 0xc7, 0xab, 0x09, 0x90, 0x8e, 0x65, 0xaf, 0x5b, 0x9a, 0xd7, 0x8d, 0xc7, 0xf2,
	0x03, 0xd7, 0x96, 0xad, 0x6d, 0x62, 0x53, 0xdd, 0x71, 0x31, 0xc0, 0x4c, 0x7e, 0x02, 0xf0, 0xca,
	0x04, 0x7b, 0xa2, 0xc1, 0x99, 0xa0, 0xe8, 0x19, 0x5c, 0x6c, 0x8e, 0xec, 0xc5, 0x41, 0xe2, 0xbf,
	0x74, 0x2c, 0x7b, 0xdb, 0x9a, 0x78, 0x8e, 0xd6, 0x29, 0xb9, 0x53, 0x22, 0xe8, 0xd1, 0x90, 0x85,
	0xa8, 0xb2, 0x70, 0x23, 0xd4, 0x82, 0xdf, 0xd5, 0x90, 0x87, 0xa7, 0x70, 0x49, 0x59, 0x78, 0x2c,
	0x02, 0x55, 0xff, 0xf4, 0x78, 0x92, 0x05, 0x68, 0x8c, 0x53, 0xd5, 0xa9, 0xa4, 0xe0, 0x45, 0x47,
	0x94, 0x03, 0x9e, 0x94, 0xf4, 0xf9, 0xe2, 0x82, 0x13, 0x84, 0x27, 0x3b, 0x00, 0x5e, 0x1d, 0x89,
	0x37, 0xe7, 0x49, 0xde, 0x93, 0xf9, 0x77, 0x86, 0xe8, 0xda, 0xd9, 0x2e, 0x75, 0x6a, 0xdb, 0xf0,
	0x9c, 0x4b, 0x85, 0xb7, 0x2f, 0x7b, 0x23, 0x74, 0x67, 0xaa, 0x11, 0x0a, 0x8a, 0x3d, 0x64, 0xd2,
	0x3d, 0x2c, 0xf6, 0x64, 0xfe, 0xda, 0x10, 0x65, 0x8f, 0xe7, 0xe0, 0xff, 0xca, 0x03, 0xfa, 0x08,
	0xe0, 0xc2, 0xd0, 0xa1, 0xa3, 0xb5, 0x33, 0xbb, 0x9c, 0x30, 0x79, 0xc6, 0xfa, 0x8c, 0x2c, 0xbf,
	0xa9, 0xe4, 0xe6, 0xab, 0xaf, 0x3f, 0x8f, 0xa3, 0xeb, 0x68, 0x15, 0xf7, 0x1f, 0x3b, 0xb6, 0x37,
	0xe6, 0xe9, 0xc2, 0xa4, 0x2a, 0x9d, 0x03, 0x8a, 0x8f, 0x06, 0x83, 0xd3, 0x42, 0xef, 0xa3, 0x70,
	0x71, 0xf4, 0xea, 0xa1, 0x8d, 0xb0, 0x46, 0x26, 0x3c, 0x6d, 0xc6, 0xdd, 0xd9, 0x89, 0xda, 0xc4,
	0x3b, 0xa0, 0x5c, 0xbc, 0x05, 0x28, 0x15, 0x66, 0x63, 0xb7, 0x4b, 0x2c, 0xad, 0xa1, 0xec, 0x54,
	0xc0, 0x21, 0xbb, 0xa5, 0x02, 0xca, 0xcd, 0xce, 0xc2, 0x47, 0xc1, 0x1b, 0xd3, 0x42, 0x6f, 0xa2,
	0xf0, 0xf2, 0x84, 0xc1, 0x45, 0xf7, 0xa6, 0x4f, 0x60, 0xdc, 0xbd, 0x36, 0xee, 0xff, 0x36, 0x5f,
	0x07, 0xd9, 0x52, 0x39, 0xbe, 0x40, 0x99, 0xd0, 0x69, 0xf0, 0x24, 0x1f, 0x0e, 0x27, 0x8f, 0x1e,
	0xcc, 0x4c, 0x1a, 0xc9, 0x26, 0x5f, 0xf8, 0xdc, 0x36, 0xc1, 0x49, 0xdb, 0x04, 0x3f, 0xda, 0x26,
	0x78, 0xdd, 0x31, 0x23, 0x27, 0x1d, 0x33, 0xf2, 0xad, 0x63, 0x46, 0x4a, 0x37, 0x6d, 0x47, 0x3e,
	0xf7, 0x2a, 0x56, 0x95, 0xd7, 0x7b, 0x55, 0xfc, 0x9f, 0x15, 0x51, 0xdb, 0xc3, 0x2f, 0x03, 0x55,
	0x2a, 0x73, 0xea, 0x4b, 0xba, 0xfa, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x33, 0x0b, 0x64, 0xe8, 0x1e,
	0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// IsQuarantined checks if an account has opted into quarantine.
	IsQuarantined(ctx context.Context, in *QueryIsQuarantinedRequest, opts ...grpc.CallOption) (*QueryIsQuarantinedResponse, error)
	// QuarantinedFunds gets information about funds that have been quarantined.
	//
	// If both a to_address and from_address are provided, any such quarantined funds will be returned regardless of
	// whether they've been declined. If only a to_address is provided, the unaccepted and undeclined funds waiting on a
	// response from to_address will be returned. If neither a to_address nor from_address is provided, all non-declined
	// quarantined funds for any address will be returned. The request is invalid if only a from_address is provided.
	QuarantinedFunds(ctx context.Context, in *QueryQuarantinedFundsRequest, opts ...grpc.CallOption) (*QueryQuarantinedFundsResponse, error)
	// QuarantineAutoResponses gets the auto-response settings for a quarantined account.
	//
	// The to_address is required. If a from_address is provided only the auto response for that from_address will be
	// returned. If no from_address is provided, all auto-response settings for the given to_address will be returned.
	QuarantineAutoResponses(ctx context.Context, in *QueryQuarantineAutoResponsesRequest, opts ...grpc.CallOption) (*QueryQuarantineAutoResponsesResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) IsQuarantined(ctx context.Context, in *QueryIsQuarantinedRequest, opts ...grpc.CallOption) (*QueryIsQuarantinedResponse, error) {
	out := new(QueryIsQuarantinedResponse)
	err := c.cc.Invoke(ctx, "/cosmos.quarantine.v1beta1.Query/IsQuarantined", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuarantinedFunds(ctx context.Context, in *QueryQuarantinedFundsRequest, opts ...grpc.CallOption) (*QueryQuarantinedFundsResponse, error) {
	out := new(QueryQuarantinedFundsResponse)
	err := c.cc.Invoke(ctx, "/cosmos.quarantine.v1beta1.Query/QuarantinedFunds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuarantineAutoResponses(ctx context.Context, in *QueryQuarantineAutoResponsesRequest, opts ...grpc.CallOption) (*QueryQuarantineAutoResponsesResponse, error) {
	out := new(QueryQuarantineAutoResponsesResponse)
	err := c.cc.Invoke(ctx, "/cosmos.quarantine.v1beta1.Query/QuarantineAutoResponses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// IsQuarantined checks if an account has opted into quarantine.
	IsQuarantined(context.Context, *QueryIsQuarantinedRequest) (*QueryIsQuarantinedResponse, error)
	// QuarantinedFunds gets information about funds that have been quarantined.
	//
	// If both a to_address and from_address are provided, any such quarantined funds will be returned regardless of
	// whether they've been declined. If only a to_address is provided, the unaccepted and undeclined funds waiting on a
	// response from to_address will be returned. If neither a to_address nor from_address is provided, all non-declined
	// quarantined funds for any address will be returned. The request is invalid if only a from_address is provided.
	QuarantinedFunds(context.Context, *QueryQuarantinedFundsRequest) (*QueryQuarantinedFundsResponse, error)
	// QuarantineAutoResponses gets the auto-response settings for a quarantined account.
	//
	// The to_address is required. If a from_address is provided only the auto response for that from_address will be
	// returned. If no from_address is provided, all auto-response settings for the given to_address will be returned.
	QuarantineAutoResponses(context.Context, *QueryQuarantineAutoResponsesRequest) (*QueryQuarantineAutoResponsesResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) IsQuarantined(ctx context.Context, req *QueryIsQuarantinedRequest) (*QueryIsQuarantinedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsQuarantined not implemented")
}
func (*UnimplementedQueryServer) QuarantinedFunds(ctx context.Context, req *QueryQuarantinedFundsRequest) (*QueryQuarantinedFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuarantinedFunds not implemented")
}
func (*UnimplementedQueryServer) QuarantineAutoResponses(ctx context.Context, req *QueryQuarantineAutoResponsesRequest) (*QueryQuarantineAutoResponsesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuarantineAutoResponses not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_IsQuarantined_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsQuarantinedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsQuarantined(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.quarantine.v1beta1.Query/IsQuarantined",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsQuarantined(ctx, req.(*QueryIsQuarantinedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuarantinedFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQuarantinedFundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuarantinedFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.quarantine.v1beta1.Query/QuarantinedFunds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuarantinedFunds(ctx, req.(*QueryQuarantinedFundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuarantineAutoResponses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQuarantineAutoResponsesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuarantineAutoResponses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.quarantine.v1beta1.Query/QuarantineAutoResponses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuarantineAutoResponses(ctx, req.(*QueryQuarantineAutoResponsesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cosmos.quarantine.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsQuarantined",
			Handler:    _Query_IsQuarantined_Handler,
		},
		{
			MethodName: "QuarantinedFunds",
			Handler:    _Query_QuarantinedFunds_Handler,
		},
		{
			MethodName: "QuarantineAutoResponses",
			Handler:    _Query_QuarantineAutoResponses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cosmos/quarantine/v1beta1/query.proto",
}

func (m *QueryQuarantinedFundsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQuarantinedFundsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQuarantinedFundsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryQuarantinedFundsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQuarantinedFundsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQuarantinedFundsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.QuarantinedFunds) > 0 {
		for iNdEx := len(m.QuarantinedFunds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.QuarantinedFunds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsQuarantinedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsQuarantinedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsQuarantinedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsQuarantinedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsQuarantinedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsQuarantinedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsQuarantined {
		i--
		if m.IsQuarantined {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryQuarantineAutoResponsesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQuarantineAutoResponsesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQuarantineAutoResponsesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryQuarantineAutoResponsesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQuarantineAutoResponsesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQuarantineAutoResponsesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Results) > 0 {
		for iNdEx := len(m.Results) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Results[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryQuarantinedFundsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryQuarantinedFundsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.QuarantinedFunds) > 0 {
		for _, e := range m.QuarantinedFunds {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIsQuarantinedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIsQuarantinedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsQuarantined {
		n += 2
	}
	return n
}

func (m *QueryQuarantineAutoResponsesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryQuarantineAutoResponsesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryQuarantinedFundsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQuarantinedFundsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQuarantinedFundsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQuarantinedFundsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQuarantinedFundsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQuarantinedFundsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuarantinedFunds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuarantinedFunds = append(m.QuarantinedFunds, &QuarantinedFunds{})
			if err := m.QuarantinedFunds[len(m.QuarantinedFunds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsQuarantinedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsQuarantinedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsQuarantinedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsQuarantinedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsQuarantinedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsQuarantinedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsQuarantined", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsQuarantined = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQuarantineAutoResponsesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQuarantineAutoResponsesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQuarantineAutoResponsesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQuarantineAutoResponsesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQuarantineAutoResponsesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQuarantineAutoResponsesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &QuarantineAutoResponseEntry{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
