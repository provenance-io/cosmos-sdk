syntax = "proto3";
package cosmos.sanction.v1beta1;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/cosmos/cosmos-sdk/x/sanction";

// Query defines the gRPC querier service.
service Query {
  // IsSanctioned checks if an account has been sanctioned.
  rpc IsSanctioned(QueryIsSanctionedRequest) returns (QueryIsSanctionedResponse) {
    option (google.api.http).get = "/cosmos/sanction/v1beta1/active/{address}";
  }

  // SanctionedAddresses returns a list of sanctioned addresses.
  rpc SanctionedAddresses(QuerySanctionedAddressesRequest) returns (QuerySanctionedAddressesResponse) {
    option (google.api.http).get = "/cosmos/sanction/v1beta1/all";
  }
}

// QueryIsSanctionedRequest defines the RPC request for checking if an account is sanctioned.
message QueryIsSanctionedRequest {
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// QueryIsSanctionedResponse defines the RPC response of an IsSanctioned query.
message QueryIsSanctionedResponse {
  // is_sanctioned is true if the address is sanctioned.
  bool is_sanctioned = 1;
}

// QuerySanctionedAddressesRequest defines the RPC request for listing sanctioned accounts.
message QuerySanctionedAddressesRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 99;
}

// QuerySanctionedAddressesResponse defines the RPC response of a SanctionedAddresses query.
message QuerySanctionedAddressesResponse {
  // addresses is the list of sanctioned account addresses.
  repeated string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 99;
}